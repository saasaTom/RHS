@model IEnumerable<RobynHandMadeSoap.News>
@{
    ViewBag.Title = "News";
}
<script src="@System.Web.Optimization.BundleTable.Bundles.ResolveBundleUrl("~/Scripts/js")"></script>
@{

    ViewBag.ItemsPerPage = ViewBag.ItemsPerPage ?? 20;
    ViewBag.ItemsPerPageOptions = ViewBag.ItemsPerPageOptions ?? new List<int>{1,2,5, 10, 20, 50, 100 };

    int currentPage = ViewBag.Start / ViewBag.ItemsPerPage + 1;
    int pageCount = (ViewBag.Count - 1) / ViewBag.ItemsPerPage + 1;
    ViewBag.Start = (currentPage - 1) * ViewBag.ItemsPerPage;

    RouteValueDictionary currentRouteValues = new RouteValueDictionary(new {
        start = ViewBag.Start,
        itemsPerPage = ViewBag.ItemsPerPage,
        orderBy = ViewBag.OrderBy,
        desc = ViewBag.Desc
    });
}
@helper AjaxGridNavigation(int currentPage, int pageCount, RouteValueDictionary currentRouteValues) {
    <div class="AjaxGridNavigation">
        @{
            int currentStart = (int)currentRouteValues["start"];
            int itemsPerPage = (int)currentRouteValues["itemsPerPage"];
        }
        @if (currentPage != 1) {
            currentRouteValues["start"] = 0;
            <a href="@Url.RouteUrl(currentRouteValues)" class="begin">|&lt;</a>
            currentRouteValues["start"] = currentStart - itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="prev">&lt;&lt;</a>
        } else {
            <span class="begin">|&lt;</span> <span class="prev">&lt;&lt;</span>
        }
        <span>Page</span> <input type="text" value="@currentPage" class="pageNum hidden" />
        <span class="pageNum">@currentPage</span> <span>of</span> <span class="pageCount">@pageCount</span>
        @if (currentPage != pageCount) {
            currentRouteValues["start"] = currentStart + itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="next">&gt;&gt;</a>
            currentRouteValues["start"] = (pageCount - 1) * itemsPerPage;
            <a href="@Url.RouteUrl(currentRouteValues)" class="end">&gt;|</a>
        } else {
            <span class="next">&gt;&gt;</span> <span class="end">&gt;|</span>
        }
        @{currentRouteValues["start"] = currentStart;}
        <a href="@Url.RouteUrl(currentRouteValues)" class="refresh">[Refresh Grid]</a>
        <span class="itemsPerPage hidden">Items Per Page:
            <select>
                @foreach (var option in ViewBag.ItemsPerPageOptions) {
                    <option value="@option" @if (option == ViewBag.ItemsPerPage) {
                            @: selected="selected"
                    }>@option</option>
                }
            </select>
        </span>
    </div>
}

<h2>News</h2>

@*        <script>

    //function setup() {
    //    var text = $('#newsReplace').html();
    //    text = text.replace(/\[p1\]/g, "<p class=\"newsFirstP\">");
    //    text = text.replace(/\[p\]/g, "<p>");
    //    text = text.replace(/\[\/p\]/g, "</p>");
    //    text = text.replace(/\[br\]/g, "<br>");
    //    text = text.replace(/\[\/br\]/g, "<br>");
    //    text = text.replace(/\[em\]/g, "<em>");
    //    text = text.replace(/\[\/em\]/g, "</em>");
    //    text = text.replace(/\[\/a\]/g, "</a>");
    //    text = text.replace(/\[a/g, "<a");
    //    text = text.replace(/\]/g, ">");
    //    $('#newsReplace').html(text);
    //}
    //$(document).ready(function () {
    //    setup();

        

    //});

    function setupDropable(row)
    {
        function noopHandler(evt) {
            evt.stopPropagation();
            evt.preventDefault();
        }

        function handleReaderLoad(evt) {
            var img = document.getElementById("preview");
            img.src = evt.target.result;

        }

        function createFileName(pkDate)
        {
            var dateString = "News-";
            var monthNames = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
            pkDate = pkDate.replace("a.m.","").replace("p.m.","");
            var newsDate = new Date (Date.parse(pkDate));
            dateString += newsDate.getDate();
            dateString += (monthNames[newsDate.getMonth()]);
            dateString += newsDate.getFullYear();
            return dateString;
            //alert(dateString);
        }

        function UpLoadFiles(file) {
            var xhr = new XMLHttpRequest();

            //Set up event handler for when our asynch call changes state
            xhr.onreadystatechange=function()
            {
                //We only really care about success
                if (xhr.readyState==4 && xhr.status==200)
                {
                    //change preview image to result of the file upload, which is our relaive path on the server
                    $("#ImgURL").attr("value",xhr.responseText);
                }
            }

            //if (xhr.upload) {};

            xhr.addEventListener("progress",function (evt) {
                
                if (evt.lengthComputable) {
                    //alert("Have Upload")
                    document.getElementById("droplabel").innerHTML = "0 percent" + " complete";
                    var percentageUploaded = parseInt((evt.loaded / evt.total) * 100);
                    document.getElementById("droplabel").innerHTML = percentageUploaded + "% complete";
                }
            },false);

            xhr.addEventListener("load",function () {
                //Inform user when file completely loaded
                alert("File Successfully Uploaded to News Server"); 
            },false);

            //Make Asynch call to server to upload file via POST
            xhr.open("POST", "/News/Upload", true);

            
            var pkDate = $("tr td #Date").val();
            //alert(pkDate);
            var dateString = createNewsFileName(pkDate);

            xhr.setRequestHeader("Content-Type", "multipart/form-data");
            xhr.setRequestHeader("X-File-Name", dateString);
            xhr.setRequestHeader("X-File-Size", file.size);
            xhr.setRequestHeader("X-File-Type", file.type);

            xhr.send(file);

        }

        //Process a File Drop event
        function handleFiles(files) {
            //Only look at first file, as we don't care about more!
            var file = files[0];
 
            //Inform user that file is being processed!
            document.getElementById("droplabel").innerHTML = "Processing " + file.name;
 
            var reader = new FileReader();
 
            // init the reader event handlers
            reader.onload = handleReaderLoad;
 
            // begin the read operation
            reader.readAsDataURL(file);

            //Handle the file upload
            UpLoadFiles(file);

        }

        //Hadle a drop event
        function dropHandler(evt) {
            evt.stopPropagation();
            evt.preventDefault();
 
            //Find the Files that have been dropped
            var files = evt.dataTransfer.files;
            var count = files.length;
            var pkDate = $("tr td #Date").val();
 
            if (pkDate == null || pkDate.length == 0) {
                alert("You must set a date first!");
                $("#dropbox").css("background-color","white");
                return false;
            }
                
            // Only call the handler if 1 or more files was dropped.
            if (count > 0 ) {
                handleFiles(files);
            }
        }


        //Set the Background color blue when we enter the droppable file area!
        function dragenter(evt) {
            evt.stopPropagation();
            evt.preventDefault();

            $("#dropbox").css("background-color","blue");
 
        }

        //Set the Background color back to White when we move outside the droppable file area!
        function dragexit(evt) {
            evt.stopPropagation();
            evt.preventDefault();

            $("#dropbox").css("background-color","white");
 
        }


        //Block Main Window from Opening File in the window!!! Only the drop zone can accept files
        window.addEventListener("dragover",function(e){
            e = e || event;
            e.dataTransfer.dropEffect = "none";
            e.dataTransfer.dropAllowed = "none";
            e.stopPropagation();
            e.preventDefault();
        },false);



        //Find Drop File Ares
        var dropbox = document.getElementById("dropbox")
 
        // init event handlers
        dropbox.addEventListener("dragenter", dragenter, false);
        dropbox.addEventListener("dragexit", dragexit, false);
        dropbox.addEventListener("dragover", noopHandler, false);
        dropbox.addEventListener("drop", dropHandler, false);

    };
        </script>*@

<script src="~/Scripts/ImageUpload.js"></script>


<div id="AjaxGridContainer">
    <p>
        <a href="#insertEmptyRow" class="insertEmptyRow hidden">Create New</a>
    </p>
    @AjaxGridNavigation(currentPage, pageCount, currentRouteValues)
    <table id="AjaxGrid">
        <thead>
            <tr>
                <th data-column-name="Date">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Date)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Date", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Date" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="Detail">
                    <span class="reorder">@Html.DisplayNameFor(model => model.Detail)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "Detail", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "Detail" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="ImgURL">
                    <span class="reorder">@Html.DisplayNameFor(model => model.ImgURL)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "ImgURL", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "ImgURL" })" class="downarrow">&darr;</a>
                </th>
                <th data-column-name="DateString">
                    <span class="reorder">@Html.DisplayNameFor(model => model.DateString)</span>
                    <a href="@Url.RouteUrl(new { orderBy = "DateString", desc = true })" class="uparrow">&uarr;</a>
                    <a href="@Url.RouteUrl(new { orderBy = "DateString" })" class="downarrow">&darr;</a>
                </th>
                <th class="hidden"></th>
            </tr>
        </thead>
        <tbody id="newsReplace">
@{Html.RenderAction("GridData", new { start = ViewBag.Start });}
        </tbody>
    </table>
    @AjaxGridNavigation(currentPage, pageCount, currentRouteValues)
</div>

<style>
    #AjaxGrid, #AjaxGrid input, #AjaxGrid button { clear: both; width: 100%; }
    #AjaxGrid thead { white-space: nowrap; }
    #AjaxGrid thead a, #AjaxGridContainer .AjaxGridNavigation a { text-decoration: none; }
    #AjaxGrid .error { background-color: #f66; color: #000; }
    #AjaxGridContainer .hidden { display: none; }
    #AjaxGridContainer .AjaxGridNavigation input.pageNum { width: 2em; }
    #AjaxGridContainer .AjaxGridNavigation .itemsPerPage { float: right; }
</style>

<script>
    (function($, undefined) {
        var totalRowCount = @ViewBag.Count,
            currentPage = 1,
            pageCount = @pageCount,
            savedParams = {
                start: 0,
                itemsPerPage: @ViewBag.ItemsPerPage
            },
            unloadWarningSet = false,
            containerContext, gridContext, navigationContext;

        $.ajaxSetup ({cache: false});

        function reloadGrid(params) {
            if (params.start === undefined || (params.start >= 0 && params.start < totalRowCount)) {
                if (!unloadWarningSet || confirm('You have unsaved changes. Are you sure you want to reload the grid?')) {
                    unloadWarningSet = false;
                    $(window).unbind('beforeunload');

                    $.extend(savedParams, params);
                    currentPage = Math.floor(savedParams.start / savedParams.itemsPerPage) + 1;
                    savedParams.start = (currentPage - 1) * savedParams.itemsPerPage;

                    return $.get('@Html.Raw(Url.Action("GridData"))', savedParams).done(function(rows, status, xhr) {
                        gridContext.find('tbody').html(rows);
                        totalRowCount = Math.floor(xhr.getResponseHeader('X-Total-Row-Count'));
                        pageCount = Math.ceil(totalRowCount / savedParams.itemsPerPage);

                        gridContext.find('td').filter(':last-child').removeClass('hidden');
                        navigationContext.find('input.pageNum').val(currentPage);
                        navigationContext.find('span.pageCount').html(pageCount);
                        navigationContext.find('.itemsPerPage select').val(savedParams.itemsPerPage);

                        if (currentPage === 1) {
                            navigationContext.find('a.prev, a.begin').each(disableLink);
                        } else {
                            navigationContext.find('span.prev, span.begin').each(enableLink);
                        }
                        if (currentPage === pageCount) {
                            navigationContext.find('a.next, a.end').each(disableLink);
                        } else {
                            navigationContext.find('span.next, span.end').each(enableLink);
                        }
                    });
                }
            }
            return $.Deferred().reject();
        }

        function reorderByColumn(clickedArrow) {
            var reloadParams = {
                start: 0,
                orderBy: $(clickedArrow).parent().data('column-name'),
                desc: $(clickedArrow).is('.uparrow')
            };
            reloadGrid(reloadParams).done(function() {
                gridContext.find('span.uparrow, span.downarrow').each(enableLink);
                disableLink.call(clickedArrow);
            });
        }

        function createRow(row) {
            var postParams = getPostParams(row);
            $.post('@Html.Raw(Url.Action("Create"))', postParams)
                .done(function(newRow) {
                    row.replaceWith(newRow); 
                    totalRowCount++;
                    clearUnloadWarning();

                })
                .fail(function() {
                    row.addClass('error');
                });
        }

        function makeRowEditable(row) {
            $.get('@Html.Raw(Url.Action("Edit", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), function(editableRow) {
                editableRow = editableRow.replace(/\[p1]/,"");
                editableRow = editableRow.replace(/\[\/p]/,"\n");
                editableRow = editableRow.replace(/\[br\]/g,"\n");
                row.replaceWith(editableRow);
                /*setupDropable(row);*/
                $('input#Date').datepicker({dateFormat: "dd M yy"});
            });
            setUnloadWarning();
        }

        function editRow(row) {
            var postParams = getPostParams(row);
            postParams.push({name: 'Id', value: row.data('pkey')});
            $.post('@Html.Raw(Url.Action("Edit", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), postParams)
                .done(function(newRow) {
                    row.replaceWith(newRow);
                    /*setup();*/
                    clearUnloadWarning();
                })
                .fail(function() {
                    row.addClass('error');
                });
        }

        function deleteRow(row) {
            var postParams = getPostParams(row);
            postParams.push({name: 'Id', value: row.data('pkey')});
            if (confirm('Are you sure you want to delete this row?')) {
                $.post('@Html.Raw(Url.Action("Delete", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), postParams)
                    .done(function() {
                        row.remove();
                        totalRowCount--;
                    })
                    .fail(function() {
                        alert('Row deletion failed.');
                    });
            }
        }

        function disableLink() {
            var elem = $(this),
                classes = elem.attr('class'),
                href = elem.attr('href'),
                html = elem.html();
            elem.replaceWith($('<span data-href="' + href + '" class="' + classes + '">' + html + '</span>'));
        }

        function enableLink() {
            var elem = $(this),
                classes = elem.attr('class'),
                href = elem.data('href'),
                html = elem.html();
            elem.replaceWith($('<a href="' + href + '" class="' + classes + '">' + html + '</a>'));
        }

        function getPostParams(row) {
            return row.find(':input[name]:not(:disabled)').filter(':not(:checkbox), :checked').map(function () {
                var input = $(this);
                return { name: input.attr('name'), value: input.val().replace(/\n/g,"[br]") };
            }).get();
        }

        function setUnloadWarning() {
            if (!unloadWarningSet) {
                unloadWarningSet = true;
                $(window).bind('beforeunload', function() {
                    return 'You have unsaved changes. Are you sure you want to leave?';
                });
            }
        }

        function clearUnloadWarning() {
            gridContext.find('td').filter(':last-child').removeClass('hidden');
            if (unloadWarningSet && $('.createRow, .editRow').length === 0) {
                unloadWarningSet = false;
                $(window).unbind('beforeunload');
            }
        }

        $(function () {
            containerContext = $('#AjaxGridContainer');
            gridContext = containerContext.find('#AjaxGrid');
            navigationContext = containerContext.find('.AjaxGridNavigation');

            containerContext.find('.insertEmptyRow').removeClass('hidden');
            navigationContext.find('input.pageNum').removeClass('hidden');
            navigationContext.find('.itemsPerPage').removeClass('hidden');
            navigationContext.find('span.pageNum').addClass('hidden');
            gridContext.find('th span.reorder').each(enableLink);
            gridContext.find('tr > *').filter(':last-child').removeClass('hidden');

            navigationContext.delegate('a.prev', 'click', function(e) {
                reloadGrid({start: savedParams.start - savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.delegate('a.next', 'click', function(e) {
                reloadGrid({start: savedParams.start + savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.delegate('a.begin', 'click', function(e) {
                reloadGrid({start: 0});
                e.preventDefault();
            });
            navigationContext.delegate('a.end', 'click', function(e) {
                reloadGrid({start: (pageCount - 1) * savedParams.itemsPerPage});
                e.preventDefault();
            });
            navigationContext.find('a.refresh').click(function(e) {
                reloadGrid({});
                e.preventDefault();
            });

            navigationContext.find('input.pageNum')
                .keyup(function(e) {
                    if (e.keyCode === 13) {
                        $(this).blur();
                    }
                })
                .blur(function() {
                    var newPageNum = Number($(this).val());
                    if (newPageNum >= 1 && newPageNum <= pageCount) {
                        reloadGrid({start: (newPageNum - 1) * savedParams.itemsPerPage});
                    } else {
                        $(this).val(currentPage);
                    }
                });

            navigationContext.find('.itemsPerPage select').change(function() {
                reloadGrid({itemsPerPage: Number($(this).val())});
            });

            gridContext.delegate('thead a.uparrow, thead a.downarrow', 'click', function(e) {
                reorderByColumn(this);
                e.preventDefault();
            });
            gridContext.find('thead a.reorder').click(function(e) {
                var th = $(this).parent(),
                    arrow = th.find('a.downarrow');
                if (arrow.length === 0) {
                    arrow = th.find('a.uparrow');
                }
                reorderByColumn(arrow[0]);
                e.preventDefault();
            });

            $('.insertEmptyRow').click(function(e) {
                $.get('@Html.Raw(Url.Action("Create"))', function(emptyRow) {
                    gridContext.find('tbody').prepend(emptyRow);
                    $('input#Date').datepicker({dateFormat: "dd M yy"});
                    /*setupDropable(emptyRow);*/
                });
                setUnloadWarning();
                e.preventDefault();
            });


            

            gridContext.delegate('.createRow', 'click', function() {
                createRow($(this).parents('tr'));
            });
            gridContext.delegate('.cancelCreateRow', 'click', function() {
                $(this).parents('tr').remove();
                clearUnloadWarning();
            });


            /*Setup Droppable Image Boxes*/
            var GridId = "AjaxGridContainer";

            var imgUploadParams = {
                imgPrefix: "News-",
                useDynamicDate: true,
                fileNameField: "Date",
                postURL: "/News/Upload/",
                savePathRelative:  "/Images/News/",
                imgWidth: 170,
                imgHeight: 225,
                savePathRelativeThumb: "",
                imgThumbWidth: 0,
                imgThumbHeight: 0
            };
            setupDropable(GridId,imgUploadParams);

            gridContext.delegate('.makeRowEditable', 'click', function(e) {
                makeRowEditable($(this).parents('tr'));
                e.preventDefault();
            });
            gridContext.delegate('.editRow', 'click', function() {
                editRow($(this).parents('tr'));
            });
            gridContext.delegate('.cancelEditRow', 'click', function() {
                var row = $(this).parents('tr');
                $.get('@Html.Raw(Url.Action("RowData", new { id = "__ID__" }))'.replace(/__ID__/, row.data('pkey')), function(newRow) {
                    row.replaceWith(newRow);
                    /*setup();*/
                    clearUnloadWarning();
                }); 
            });

            gridContext.delegate('.deleteRow', 'click', function(e) {
                deleteRow($(this).parents('tr').eq(0));
                e.preventDefault();
            });

            //Set up Description Drop Down as Multi Line Editable!!!
            gridContext.delegate('input[name=Description]', 'click', function (e) {
                var textAreaDiv = $(this).parent().find("#dropdownDescDiv");
                var inputDesc = $(this);
                textAreaDiv.find("textarea").val(inputDesc.val().replace(/\[br\]/g,"\n").replace(/\<\/br\>/g,"\n"));
                textAreaDiv.show();
                textAreaDiv.find("textarea").focus();
                textAreaDiv.find("textarea").blur(function (e) { 
                    //Parent child input text = child.textarea.text
                    inputDesc.val($(this).val().replace(/\n/g,"[br]"));
                    //
                    //hide the parent div
                    textAreaDiv.hide();
                } )
            });

           

        });
    })(jQuery);
</script>
